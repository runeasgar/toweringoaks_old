<?php
/**
 * @file
 * Code for the modulog feature.
 */

include_once 'modulog.features.inc';

// Establishes accepted URL paths for the bookmarklets
function modulog_menu() {
  $items['flag/favorite/%/%'] = array(
    'page callback' => 'modulog_flag_favorite_process',
    'access callback' => TRUE,
    'page arguments' => array(2,7),
  );
  $items['flag/mark-for-review/%/%'] = array(
    'page callback' => 'modulog_flag_mark_for_review_process',
    'access callback' => TRUE,
    'page arguments' => array(2,7),
  );
  $items['user/recreate-code'] = array(
  	'page callback' => 'modulog_user_recreate_code',
  	'access callback' => TRUE,
  );
  return $items;
}

// Generate unique bookmarklet code
function modulog_generate_bookmarklet_code() {
	global $user;
	$code = sha1(uniqid());
	$result = modulog_get_uid_from_code($code);
	if (is_null($result)) {
		$user_object = user_load($user->uid);
		$user_object->field_bookmarklet_code['und'][0]['value'] = $code;
		user_save($user_object);
		return $code;
	}	else {
		return modulog_generate_bookmarklet_code();
	}
}

// Sets up the user's unique bookmarklet code
// I think this might not be working because the user isn't logged in on registration
/*
function modulog_user_insert(&$edit, $account, $category) {
	$code = modulog_generate_bookmarklet_code();
	dsm($edit);
	dsm("Your bookmarklet code has been generated.");
}
*/

// Allows user to recreate their unique code, in the event of abuse
function modulog_user_recreate_code() {
	$new_code = modulog_generate_bookmarklet_code();
	drupal_set_message("Your new bookmarklet code has been generated, and the new bookmarklet is below.");
	drupal_goto('user');
}

// Create the bookmarklet block
function modulog_block_info() {    
  $blocks['bookmarklets'] = array(
    // info: The name of the block.
    'info' => t('Your Bookmarklets'),
  );
  return $blocks;
}

// Give the bookmarklet block content
function modulog_block_view($delta = '') {
  // The $delta parameter tells us which block is being requested.
  switch ($delta) {
    case 'bookmarklets':
    	global $user;
    	global $base_url;
    	$user_object = user_load($user->uid);
    	
      $block['subject'] = t('Your Bookmarklets');
      if (isset($user_object->field_bookmarklet_code['und'][0]['value'])) {
				$iframe_favorite_link = "javascript:(function(){frame=document.createElement('iframe');frame.setAttribute('src','" . $base_url . "/flag/favorite/" . $user_object->field_bookmarklet_code['und'][0]['value'] . "/'+document.URL);frame.style.width='100%';frame.setAttribute('id','modulog-message');frame.style.height='32px';frame.style.position='fixed';frame.style.top='0';frame.style.left='0';frame.style.zIndex='10000';document.body.appendChild(frame);setTimeout(function(){frame.parentNode.removeChild(frame);},10000)})();";
				$iframe_review_link = "javascript:(function(){frame=document.createElement('iframe');frame.setAttribute('src','" . $base_url . "/flag/mark-for-review/" . $user_object->field_bookmarklet_code['und'][0]['value'] . "/'+document.URL);frame.style.width='100%';frame.setAttribute('id','modulog-message');frame.style.height='32px';frame.style.position='fixed';frame.style.top='0';frame.style.left='0';frame.style.zIndex='10000';document.body.appendChild(frame);setTimeout(function(){frame.parentNode.removeChild(frame);},10000)})();";
				$favorite_link = "javascript:window.location='" . $base_url . "/flag/favorite/" 
				. $user_object->field_bookmarklet_code['und'][0]['value'] . "/'+document.URL;";
				$review_link = "javascript:window.location='" . $base_url . "/flag/mark-for-review/" 
				. $user_object->field_bookmarklet_code['und'][0]['value'] . "/'+document.URL;";
				$block['content'] = "Drag and drop these to your address bar, and you're ready to go to Drupal.org and start collecting modules!<p />
					<a href=" . $iframe_favorite_link . ">Mod:Fav</a> | 
					<a href=" . $iframe_review_link . ">Mod:Rev</a><p />
					To use your bookmarklets, visit any Drupal module page (http://drupal.org/project/views for example). The Mod:Fav bookmarklet adds a module to your favorites, whereas the Mod:Rev bookmarklet adds a module to your review list.<p />
					You can <a href='user/recreate-code'>recreate your bookmarklet</a> with a new unique code, if you are concerned that it is being abused. You will need to update your bookmarklets afterwards.";
				break;
			} else {
				$block['content'] = "You must <a href='" . $base_url . "/user/recreate-code'>generate your unique code</a> before you can use bookmarklets.";
			}
  }
  return $block;
}

// Request to add a module to a user's favorites
function modulog_flag_favorite_process($code = null, $project_name = null) {
  $module_exists = modulog_module_node_exists($project_name);
  if ($module_exists === true) {
		$user = user_load(modulog_get_uid_from_code($code));
		$nid = modulog_get_nid_from_url_token($project_name);
		if (!empty($user) && !empty($nid)) {
			$flag = flag_get_flag('favorite');
			$flag->flag('flag', $nid, $user); 
			print("<span style='background-color: white; font-family: Arial, sans-serif; padding: 3px; font-size: 12px;'>The module $project_name has been added to your favorites. <a href='" . $base_url . "/modules/favorites' target='_blank'>View your favorites</a></span>");
			exit();
		} else {
			print("<span style='background-color: white; font-family: Arial, sans-serif; padding: 3px; font-size: 12px;'>There was an error processing your request.</span>");
			exit();
		}
	} else {
		print("<span style='background-color: white; font-family: Arial, sans-serif; padding: 3px; font-size: 12px;'>" . $module_exists . "</span>");
	}
}

// Request to add a module to a user's review list
function modulog_flag_mark_for_review_process($code = null, $project_name = null) {
  $module_exists = modulog_module_node_exists($project_name);
  if ($module_exists === true) {
		$user = user_load(modulog_get_uid_from_code($code));
		$nid = modulog_get_nid_from_url_token($project_name);
		if (!empty($user) && !empty($nid)) {
			$flag = flag_get_flag('mark_for_review');
			$flag->flag('flag', $nid, $user); 
			print("<span style='background-color: white; font-family: Arial, sans-serif; padding: 3px; font-size: 12px;'>The module $project_name has been added to your review list. <a href='" . $base_url . "/modules/marked-for-review' target='_blank'>View your modules marked for review</a></span>");
			exit();
		} else {
			print("<span style='background-color: white; font-family: Arial, sans-serif; padding: 3px; font-size: 12px;'>There was an error processing your request.</span>");
			exit();
		}
	} else {
		print("<div style='background-color: white; font-family: Arial, sans-serif; padding: 3px; font-size: 12px;'>" . $module_exists . "</div>");
	}
}

// Get user ID from unique code
function modulog_get_uid_from_code($code) {
	$result = db_select('field_revision_field_bookmarklet_code')
     				->fields('field_revision_field_bookmarklet_code')
     				->condition('field_bookmarklet_code_value',$code,'=')
     				->execute()
     				->fetchAssoc();
  return $result['entity_id'];
}

// Check for the module node and create/scrape it if it doesn't exist
function modulog_module_node_exists($project_name) {
	$result = db_select('field_data_field_drupal_org_url_token')
     				->fields('field_data_field_drupal_org_url_token')
     				->condition('field_drupal_org_url_token_value',$project_name,'=')
     				->execute()
     				->fetchAssoc();
  if (empty($result['field_drupal_org_url_token_value'])) {
  	return modulog_create_module_from_project_name($project_name);
  } else {
  	return true;
  }
}

// Get nid of a node by it's module URL token
function modulog_get_nid_from_url_token($project_name) {
	$result = db_select('field_data_field_drupal_org_url_token')
     				->fields('field_data_field_drupal_org_url_token')
     				->condition('field_drupal_org_url_token_value',$project_name,'=')
     				->execute()
     				->fetchAssoc();
  return $result['entity_id'];
}

function modulog_create_module_from_project_name($project_name) {
  $url = 'http://www.drupal.org/project/' . $project_name;
  $ch = curl_init(); 
  curl_setopt($ch, CURLOPT_URL, $url); 
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); 

  // These options are required to prevent drupal.org anti-scraping security methods
  curl_setopt($ch, CURLOPT_FOLLOWLOCATION,true);
  curl_setopt($ch, CURLOPT_USERAGENT,'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.17 (KHTML, like Gecko) Chrome/24.0.1312.60 Safari/537.17');  
  curl_setopt($ch, CURLOPT_REFERER,'https://www.google.com/search?q=views&aq=f&sourceid=firefox&ie=UTF-8&unique=' .  sha1(uniqid()));
  curl_setopt($ch, CURLOPT_FRESH_CONNECT,true);

  // Execute the curl command
  $data = curl_exec($ch);

  curl_close($ch);

  // Acquire the module title
  $pattern = '/>(.*?)<\/h1>/';
  preg_match_all($pattern, $data, $matches);
  $module_title = $matches[1][0];
  $matches = array();
  
  if ($module_title == "Forbidden") {
    return 'Drupal.org refused the connection. Please try your request again later.';
  }

  // Acquire the module number of times installed
  $pattern = '/<li>Reported installs: <strong>(.*?)<\/strong>/';
  preg_match_all($pattern, $data, $matches);
  $module_times_installed = $matches[1][0];
  $matches = array();

  // Determine if the module is compatible with various versions, and record known versions
  $major_versions = array(6,7,8);
  $module_versions = array();
  $module_compatibilities = array();
  $version_found = false;
  foreach ($major_versions as $major_version) {
    $pattern = '/<a href="https:\/node\/\d+">(' . $major_version . '\.x-\d\.[\d|x]+[-a-z0-9]*?)<\/a>/';
    preg_match_all($pattern, $data, $matches);
    if (count($matches[1]) > 0) {
      foreach ($matches[1] as $match) {
        array_push($module_versions, $match);
        array_push($module_compatibilities, $major_version);
        $version_found = true;
      }
    }
  }
  $matches = array();
  
  // Generate the new module using the acquired information
  if ($version_found) {
		$node = new stdClass();
		$node->type = 'module';
		node_object_prepare($node);
		$node->title = $module_title;
		$node->language = LANGUAGE_NONE;
		$node->field_drupal_org_url_token['und'][0]['value'] = $project_name;
		$node->field_compatibility['und'] = array();
		$node->field_install_times['und'][0]['value'] = $module_times_installed;
		$module_compatibilities = array_unique($module_compatibilities);
		foreach ($module_compatibilities as $module_compatibility) {
			$terms = taxonomy_get_term_by_name($module_compatibility);
			foreach ($terms as $term) {
				array_push($node->field_compatibility['und'], array('tid' => $term->tid));
			}
		}
		$node->field_versions['und'][0]['value'] = '';
		foreach ($module_versions as $module_version) {
			$node->field_versions['und'][0]['value'] .= "$module_version,";
		}
		node_save($node);
		return true;
	} else {
		return 'The page you are on does not appear to be a Drupal.org module page.';
	}
}
